/*******************************************************************************
 * Copyright 2013 Francesco Cina'
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package com.jporm.persistor.generator;

import java.lang.reflect.InvocationTargetException;
import java.util.UUID;
import java.util.function.BiFunction;

import com.jporm.annotation.introspector.generator.GeneratorInfo;
import com.jporm.persistor.PropertyPersistor;

/**
 *
 * @author Francesco Cina'
 *
 *         Apr 1, 2012
 */
public class GeneratorManipulatorImpl<BEAN, P> extends GeneratorManipulator<BEAN> {

    private final PropertyPersistor<BEAN, P, ?> fieldManipulator;
    private final ValueChecker<P> valueChecker;
    private final GeneratorInfo generatorInfo;
    private BiFunction<BEAN, P, P> preElaborateField = (t, u) -> {
        return u;
    };

    public GeneratorManipulatorImpl(final PropertyPersistor<BEAN, P, ?> fieldManipulator, final GeneratorInfo generatorInfo) throws SecurityException {
        this.fieldManipulator = fieldManipulator;
        this.generatorInfo = generatorInfo;
        valueChecker = ValueCheckerFactory.getValueChecker(fieldManipulator.propertyType());
        setPreSetter();
    }

    @Override
    public boolean hasGenerator() {
        return true;
    }

    private void setPreSetter() {
        if (generatorInfo == null) {
            return;
        }
        switch (generatorInfo.getGeneratorType()) {
        case UUID:
            preElaborateField = (bean, value) -> {
                if (value == null) {
                    String newValue = UUID.randomUUID().toString();
                    this.fieldManipulator.setPropertyValueToBean(bean, (P) newValue);
                    return (P) newValue;
                }
                return value;
            };
            break;
        case SEQUENCE:
        case SEQUENCE_FALLBACK_AUTOGENERATED:
        case AUTOGENERATED:
        case AUTOGENERATED_FALLBACK_SEQUENCE:
        case NONE:
            break;
        }
    }

    @Override
    public boolean useGenerator(final BEAN bean) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
        P value = this.fieldManipulator.getPropertyValueFromBean(bean);
        value = preElaborateField.apply(bean, value);
        return valueChecker.useGenerator(value);
    }
}
