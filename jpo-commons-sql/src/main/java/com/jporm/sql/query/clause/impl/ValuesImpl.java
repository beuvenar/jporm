/*******************************************************************************
 * Copyright 2013 Francesco Cina'
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package com.jporm.sql.query.clause.impl;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.jporm.annotation.mapper.clazz.ClassDescriptor;
import com.jporm.annotation.mapper.clazz.FieldDescriptor;
import com.jporm.sql.dialect.DBProfile;
import com.jporm.sql.query.ASqlSubElement;
import com.jporm.sql.query.clause.Values;
import com.jporm.sql.query.clause.impl.value.AColumnValueGenerator;
import com.jporm.sql.query.clause.impl.value.ColumnValueGeneratorFactory;
import com.jporm.sql.query.namesolver.NameSolver;

/**
 *
 * @author Francesco Cina
 *
 * 10/lug/2011
 */
public class ValuesImpl<BEAN> extends ASqlSubElement implements Values {

	private Map<String, Object> properties = new LinkedHashMap<>();
	private List<String> generatedFields = new ArrayList<String>();

	private int version = 0;
	private boolean useGenerators = true;

	private final ClassDescriptor<BEAN> classDescriptor;

	public ValuesImpl(ClassDescriptor<BEAN> classDescriptor) {
		this.classDescriptor = classDescriptor;
	}

	@Override
	public Values eq(final String property, final Object value) {
		version++;
		properties.put(property, value);
		return this;
	}

	@Override
	public final void renderSqlElement(DBProfile dbprofile, final StringBuilder queryBuilder, final NameSolver nameSolver) {
		updateGeneratedPropertiesIfNeeded();
		queryBuilder.append("(");
		Set<String> propertyNames = new LinkedHashSet<>();
		propertyNames.addAll(generatedFields);
		propertyNames.addAll(properties.keySet());
		queryBuilder.append( columnToCommaSepareted( dbprofile, propertyNames ) );
		queryBuilder.append(") VALUES (");
		queryBuilder.append( questionCommaSepareted( dbprofile, propertyNames ));
		queryBuilder.append(") ");
	}

	@Override
	public final void appendElementValues(final List<Object> values) {
		values.addAll(properties.values());
	}

	@Override
	public final int getVersion() {
		return version;
	}


	private String questionCommaSepareted(DBProfile dbProfile, final Set<String> fieldNames) {
		List<String> queryParameters = new ArrayList<String>();
		boolean generatedKey = false;

		for (String field : fieldNames) {
			FieldDescriptor<BEAN, ?> classField = classDescriptor.getFieldDescriptorByJavaName(field);
			final AColumnValueGenerator columnValueGenerator = ColumnValueGeneratorFactory.getColumnValueGenerator( classField, dbProfile, !useGenerators );
			generatedKey = generatedKey || columnValueGenerator.isAutoGenerated();
			final String queryParameter = columnValueGenerator.insertQueryParameter( "?"); //$NON-NLS-1$
			if (queryParameter.length()>0) {
				queryParameters.add(queryParameter);
			}
		}
		return toQueryString(queryParameters);
	}

	private String columnToCommaSepareted(DBProfile dbProfile, final Set<String> fieldNames) {
		List<String> queryParameters = new ArrayList<String>();
		for (String field : fieldNames) {
			FieldDescriptor<BEAN, ?> classField = classDescriptor.getFieldDescriptorByJavaName(field);
			final AColumnValueGenerator columnValueGenerator = ColumnValueGeneratorFactory.getColumnValueGenerator( classField, dbProfile, !useGenerators );
			final String queryParameter = columnValueGenerator.insertColumn(classField.getColumnInfo().getDBColumnName());
			if (queryParameter.length()>0) {
				queryParameters.add(queryParameter);
			}
		}
		return toQueryString(queryParameters);
	}

	private String toQueryString(final List<String> queryParameters) {
		StringBuilder builder = new StringBuilder();
		for (int i=0; i<queryParameters.size(); i++) {
			builder.append( queryParameters.get(i) );
			if (i != (queryParameters.size() - 1)) {
				builder.append(", "); //$NON-NLS-1$
			}
		}
		return builder.toString();
	}

	public boolean isUseGenerators() {
		version++;
		return useGenerators;
	}

	public void setUseGenerators(boolean useGenerators) {
		this.useGenerators = useGenerators;
	}

	private void updateGeneratedPropertiesIfNeeded() {
		if(useGenerators) {
			for (String generatedField : classDescriptor.getAllGeneratedColumnJavaNames() ) {
				generatedFields.add(generatedField);
				properties.remove(generatedField);
			}
		}
	}

}
